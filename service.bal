// Copyright (c) 2023, WSO2 LLC. (http://www.wso2.com). All Rights Reserved.
// This software is the property of WSO2 LLC. and its suppliers, if any.
// Dissemination of any information or reproduction of any material contained
// herein is strictly forbidden, unless permitted by WSO2 in accordance with
// the WSO2 Software License available at: https://wso2.com/licenses/eula/3.2
// For specific language governing the permissions and limitations under
// this license, please see the license as well as any agreement youâ€™ve
// entered into with WSO2 governing the purchase of this software and any
// associated services.
//
//
// AUTO-GENERATED FILE.
//
// This file is auto-generated by Ballerina.
// Developers are allowed to modify this file as per the requirement.
import ballerina/http;
import ballerina/log;
import ballerinax/health.clients.fhir;
import ballerinax/health.fhir.r4;
import ballerinax/health.fhirr4;
import ballerinax/health.fhir.r4.international401;
import ballerinax/health.fhir.r4.parser;
import ballerinax/health.fhir.r4.uscore501;
import ballerinax/health.fhir.r4.uscore700;

// configurable string client_id = ?;
// configurable string client_secret = ?;

# Generic type to wrap all implemented profiles.
# Add required profile types here.
# public type Patient r4:Patient|<other_Patient_Profile>;
public type Patient uscore501:USCorePatientProfile|international401:Patient;

# initialize source system endpoint here

# A service representing a network-accessible API
# bound to port `9090`.
// patient service
service / on new fhirr4:Listener(9090, apiConfig) {

    // Implementation of the $match operation
    isolated resource function post fhir/r4/Patient/\$match(r4:FHIRContext fhirContext, international401:Parameters parameters) returns r4:FHIRError|r4:Bundle|error {
        // This is a dummy logic to test the connections. Todo: add relavant matching logic
        uscore501:USCorePatientProfile matchedPatient = {
            identifier: [
                {
                    use: "usual",
                    system: "",
                    value: "",
                    'type: {
                        coding: [
                            {system: "", code: ""}
                        ]
                    }
                }
            ],
            gender: "male",
            name: [
                {
                    family: "Doe",
                    given: [
                        "John",
                        "Hamilton"
                    ]
                }
            ]
        };
        r4:BundleEntry matchEntry = {
            'resource: matchedPatient,
            fullUrl: ""
        };
        r4:Bundle matchBundle = {
            'type: "searchset",
            entry: [matchEntry]
        };
        return matchBundle;
    }

    // Read the current state of single resource based on its id.
    isolated resource function get fhir/r4/Patient/[string id](r4:FHIRContext fhirContext) returns r4:FHIRError|uscore501:USCorePatientProfile|error {
        uscore501:USCorePatientProfile response = check getById(id);
        return response;
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get fhir/r4/Patient/[string id]/_history/[string vid](r4:FHIRContext fhirContext) returns Patient|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get fhir/r4/Patient(r4:FHIRContext fhirContext) returns r4:FHIRError|error|r4:Bundle {
        r4:Bundle searchResult = check search("Patient", getQueryParamsMap(fhirContext.getRequestSearchParameters()));
        return searchResult;
    }

    // Create a new resource.
    isolated resource function post fhir/r4/Patient(r4:FHIRContext fhirContext, Patient patient) returns Patient|error {
        uscore501:USCorePatientProfile uSCorePatientProfile = check create(patient.toJson());

        return uSCorePatientProfile;
    }

    // isolated resource function post fhir/r4/Patient/[string id]/\$summary(r4:FHIRContext fhirContext, Patient patient) returns Patient|error {
    //     return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    // }

    // Update the current state of a resource completely.
    isolated resource function put fhir/r4/Patient/[string id](r4:FHIRContext fhirContext, Patient patient) returns Patient|r4:OperationOutcome|r4:FHIRError {
        fhir:FHIRResponse response = check update(patient.toJson());

        do {
            return <uscore501:USCorePatientProfile>check parser:parse(response.'resource, uscore501:USCorePatientProfile);
        } on fail error parseError {
            log:printError(string `Error occurred while parsing : ${parseError.message()}`, parseError);
            return r4:createFHIRError(parseError.message(), r4:ERROR, r4:INVALID, httpStatusCode = http:STATUS_INTERNAL_SERVER_ERROR);
        }
    }

    // Update the current state of a resource partially.
    isolated resource function patch fhir/r4/Patient/[string id](r4:FHIRContext fhirContext, json patch) returns Patient|r4:OperationOutcome|r4:FHIRError {
        fhir:FHIRResponse response = check patchResource("Patient", id, patch);

        do {
            return <uscore501:USCorePatientProfile>check parser:parse(response.'resource, uscore501:USCorePatientProfile);
        } on fail error parseError {
            log:printError(string `Error occurred while parsing : ${parseError.message()}`, parseError);
            return r4:createFHIRError(parseError.message(), r4:ERROR, r4:INVALID, httpStatusCode = http:STATUS_INTERNAL_SERVER_ERROR);
        }
    }

    // Delete a resource.
    isolated resource function delete fhir/r4/Patient/[string id](r4:FHIRContext fhirContext) returns r4:OperationOutcome?|r4:FHIRError? {
        _ = check delete("Patient", id);
        return ();
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get fhir/r4/Patient/[string id]/_history(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get fhir/r4/Patient/_history(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}

public type Organization uscore501:USCoreOrganizationProfile;

// organization service
service / on new fhirr4:Listener(9070, apiConfigOrg) {

    // Read the current state of single resource based on its id.
    isolated resource function get fhir/r4/Organization/[string id](r4:FHIRContext fhirContext) returns Organization|r4:OperationOutcome|r4:FHIRError {
        return getByIdOrg(id);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get fhir/r4/Organization/[string id]/_history/[string vid](r4:FHIRContext fhirContext) returns Organization|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get fhir/r4/Organization(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        map<string[]> queryParamsMap = getQueryParamsMap(fhirContext.getRequestSearchParameters());
        return searchOrg(queryParamsMap);
    }

    // Create a new resource.
    isolated resource function post fhir/r4/Organization(r4:FHIRContext fhirContext, Organization organization) returns Organization|r4:OperationOutcome|r4:FHIRError {
        return createOrg(organization);
    }

    // Update the current state of a resource completely.
    isolated resource function put fhir/r4/Organization/[string id](r4:FHIRContext fhirContext, Organization organization) returns Organization|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch fhir/r4/Organization/[string id](r4:FHIRContext fhirContext, json patch) returns Organization|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete fhir/r4/Organization/[string id](r4:FHIRContext fhirContext) returns r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get fhir/r4/Organization/[string id]/_history(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get fhir/r4/Organization/_history(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}

public type AllergyIntolerance uscore700:USCoreAllergyIntolerance;

// allergic intolerance service
service / on new fhirr4:Listener(9100, apiConfigAllergic) {

    // Read the current state of single resource based on its id.
    isolated resource function get fhir/r4/AllergyIntolerance/[string id] (r4:FHIRContext fhirContext) returns AllergyIntolerance|r4:OperationOutcome|r4:FHIRError {
        return getByIdAllergyIntolerance(id);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get fhir/r4/AllergyIntolerance/[string id]/_history/[string vid] (r4:FHIRContext fhirContext) returns AllergyIntolerance|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get fhir/r4/AllergyIntolerance (r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        r4:Bundle searchResult = check searchAllergyIntolerance(getQueryParamsMap(fhirContext.getRequestSearchParameters()));
        return searchResult;
    }

    // Create a new resource.
    isolated resource function post fhir/r4/AllergyIntolerance (r4:FHIRContext fhirContext, AllergyIntolerance procedure) returns AllergyIntolerance|r4:OperationOutcome|r4:FHIRError {
        return createAllergyIntolerance(procedure);
    }

    // Update the current state of a resource completely.
    isolated resource function put fhir/r4/AllergyIntolerance/[string id] (r4:FHIRContext fhirContext, AllergyIntolerance allergyintolerance) returns AllergyIntolerance|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch fhir/r4/AllergyIntolerance/[string id] (r4:FHIRContext fhirContext, json patch) returns AllergyIntolerance|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete fhir/r4/AllergyIntolerance/[string id] (r4:FHIRContext fhirContext) returns r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get fhir/r4/AllergyIntolerance/[string id]/_history (r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get fhir/r4/AllergyIntolerance/_history (r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}

public type Condition uscore700:USCoreConditionEncounterDiagnosisProfile;

service / on new fhirr4:Listener(9101, apiConfigCondition) {

    // Read the current state of single resource based on its id.
    isolated resource function get fhir/r4/Condition/[string id](r4:FHIRContext fhirContext) returns Condition|r4:OperationOutcome|r4:FHIRError {
        return getByIdCondition(id);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get fhir/r4/Condition/[string id]/_history/[string vid](r4:FHIRContext fhirContext) returns Condition|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get fhir/r4/Condition(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        r4:Bundle searchResult = check searchCondition(getQueryParamsMap(fhirContext.getRequestSearchParameters()));
        return searchResult;
    }

    // Create a new resource.
    isolated resource function post fhir/r4/Condition(r4:FHIRContext fhirContext, Condition procedure) returns Condition|r4:OperationOutcome|r4:FHIRError {
        return createCondition(procedure.toJson());
    }

    // Update the current state of a resource completely.
    isolated resource function put fhir/r4/Condition/[string id](r4:FHIRContext fhirContext, Condition condition) returns Condition|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch fhir/r4/Condition/[string id](r4:FHIRContext fhirContext, json patch) returns Condition|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete fhir/r4/Condition/[string id](r4:FHIRContext fhirContext) returns r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get fhir/r4/Condition/[string id]/_history(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get fhir/r4/Condition/_history(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}


public type Goal uscore700:USCoreGoalProfile;

# initialize source system endpoint here

# A service representing a network-accessible API
# bound to port `9090`.
service / on new fhirr4:Listener(9080, apiConfigGoal) {

    // Read the current state of single resource based on its id.
    isolated resource function get fhir/r4/Goal/[string id](r4:FHIRContext fhirContext) returns Goal|r4:OperationOutcome|r4:FHIRError {
        return getByIdGoal(id);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get fhir/r4/Goal/[string id]/_history/[string vid](r4:FHIRContext fhirContext) returns Goal|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get fhir/r4/Goal(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        r4:Bundle searchResult = check searchGoal(getQueryParamsMap(fhirContext.getRequestSearchParameters()));
        return searchResult;
    }

    // Create a new resource.
    isolated resource function post fhir/r4/Goal(r4:FHIRContext fhirContext, Goal procedure) returns Goal|r4:OperationOutcome|r4:FHIRError {
        return createGoal(procedure.toJson());
    }

    // Update the current state of a resource completely.
    isolated resource function put fhir/r4/Goal/[string id](r4:FHIRContext fhirContext, Goal goal) returns Goal|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch fhir/r4/Goal/[string id](r4:FHIRContext fhirContext, json patch) returns Goal|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete fhir/r4/Goal/[string id](r4:FHIRContext fhirContext) returns r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get fhir/r4/Goal/[string id]/_history(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get fhir/r4/Goal/_history(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}

public type MedicationStatement international401:MedicationStatement;

# initialize source system endpoint here

# A service representing a network-accessible API
# bound to port `9090`.
service / on new fhirr4:Listener(9081, apiConfigMS) {

    // Read the current state of single resource based on its id.
    isolated resource function get fhir/r4/MedicationStatement/[string id](r4:FHIRContext fhirContext) returns MedicationStatement|r4:OperationOutcome|r4:FHIRError {
        return getByIdMedicationStatement(id);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get fhir/r4/MedicationStatement/[string id]/_history/[string vid](r4:FHIRContext fhirContext) returns MedicationStatement|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get fhir/r4/MedicationStatement(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        r4:Bundle searchResult = check searchMedicationStatement(getQueryParamsMap(fhirContext.getRequestSearchParameters()));
        return searchResult;
    }

    // Create a new resource.
    isolated resource function post fhir/r4/MedicationStatement(r4:FHIRContext fhirContext, MedicationStatement procedure) returns MedicationStatement|r4:OperationOutcome|r4:FHIRError {
        return createMedicationStatement(procedure);
    }

    // Update the current state of a resource partially.
    isolated resource function patch fhir/r4/MedicationStatement/[string id](r4:FHIRContext fhirContext, json patch) returns MedicationStatement|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete fhir/r4/MedicationStatement/[string id](r4:FHIRContext fhirContext) returns r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get fhir/r4/MedicationStatement/[string id]/_history(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get fhir/r4/MedicationStatement/_history(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}

public type Medication international401:Medication;

# initialize source system endpoint here

# A service representing a network-accessible API
# bound to port `9082`.
service / on new fhirr4:Listener(9082, apiConfigMedication) {

    // Read the current state of single resource based on its id.
    isolated resource function get fhir/r4/Medication/[string id](r4:FHIRContext fhirContext) returns Medication|r4:OperationOutcome|r4:FHIRError {
        return getByIdMedication(id);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get fhir/r4/Medication/[string id]/_history/[string vid](r4:FHIRContext fhirContext) returns Medication|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get fhir/r4/Medication(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        r4:Bundle searchResult = check searchMedication(getQueryParamsMap(fhirContext.getRequestSearchParameters()));
        return searchResult;
    }

    // Create a new resource.
    isolated resource function post fhir/r4/Medication(r4:FHIRContext fhirContext, Medication medication) returns Medication|r4:OperationOutcome|r4:FHIRError {
        return createMedication(medication);
    }

    // Update the current state of a resource completely.
    isolated resource function put fhir/r4/Medication/[string id](r4:FHIRContext fhirContext, Medication medication) returns Medication|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch fhir/r4/Medication/[string id](r4:FHIRContext fhirContext, json patch) returns Medication|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete fhir/r4/Medication/[string id](r4:FHIRContext fhirContext) returns r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get fhir/r4/Medication/[string id]/_history(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get fhir/r4/Medication/_history(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}
